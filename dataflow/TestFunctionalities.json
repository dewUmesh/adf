{
	"name": "TestFunctionalities",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"linkedService": {
						"referenceName": "blobLinkService",
						"type": "LinkedServiceReference"
					},
					"name": "ReadFromBlob"
				}
			],
			"sinks": [
				{
					"linkedService": {
						"referenceName": "blobLinkService",
						"type": "LinkedServiceReference"
					},
					"name": "sink1"
				},
				{
					"linkedService": {
						"referenceName": "blobLinkService",
						"type": "LinkedServiceReference"
					},
					"name": "sink2"
				}
			],
			"transformations": [
				{
					"name": "ConditionalSplit1"
				},
				{
					"name": "DerivedColumn1"
				},
				{
					"name": "DerivedColumn2"
				},
				{
					"name": "Union1"
				},
				{
					"name": "Sort1"
				},
				{
					"name": "DerivedColumn3"
				},
				{
					"name": "Split2"
				},
				{
					"name": "Exists1"
				},
				{
					"name": "Join1"
				},
				{
					"name": "Sort2"
				}
			],
			"script": "source(output(\n\t\tFirstName as string,\n\t\tLastName as string,\n\t\tID as short,\n\t\tSallary as short,\n\t\tDepartment as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: true,\n\tignoreNoFilesFound: false,\n\tformat: 'delimited',\n\tcontainer: 'blobdata1',\n\tfileName: 'got.csv',\n\tcolumnDelimiter: '\\t',\n\tescapeChar: '\\\\',\n\tqutoChar: '\\\"',\n\tcolumnNamesAsHeader: true) ~> ReadFromBlob\nReadFromBlob split(LastName == \"stark\",\n\tdisjoint: false) ~> ConditionalSplit1@(HouseStark, Others)\nConditionalSplit1@HouseStark derive(Code = 1) ~> DerivedColumn1\nConditionalSplit1@Others derive(Code = 2) ~> DerivedColumn2\nDerivedColumn1, DerivedColumn2 union(byName: true)~> Union1\nUnion1 sort(desc(ID, true)) ~> Sort1\nSort1 derive(flag = 1) ~> DerivedColumn3\nDerivedColumn3 split(Code == 1,\n\tdisjoint: false) ~> Split2@(Split1, Split2)\nSplit2@Split1, Split2@Split2 exists(Split2@Split1@flag == Split2@Split2@flag,\n\tnegate:false,\n\tbroadcast: 'auto')~> Exists1\nSplit2@Split2, DerivedColumn2 join(Split2@Split2@ID == ConditionalSplit1@Others@ID,\n\tjoinType:'inner',\n\tbroadcast: 'auto')~> Join1\nExists1 sort(asc(ID, true)) ~> Sort2\nSort2 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'delimited',\n\tcontainer: 'blobdata1',\n\tcolumnDelimiter: '|',\n\tescapeChar: '\\\\',\n\tqutoChar: '\\\"',\n\tcolumnNamesAsHeader: true,\n\tpartitionFileNames:['sink1.csv'],\n\tpartitionBy('hash', 1)) ~> sink1\nJoin1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'delimited',\n\tcontainer: 'blobdata1',\n\tcolumnDelimiter: ',',\n\tescapeChar: '\\\\',\n\tqutoChar: '\\\"',\n\tcolumnNamesAsHeader: false,\n\tpartitionFileNames:['sink2.csv'],\n\tpartitionBy('hash', 1),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> sink2"
		}
	}
}